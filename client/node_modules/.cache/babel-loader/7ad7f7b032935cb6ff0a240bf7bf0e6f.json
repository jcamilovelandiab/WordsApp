{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\reactjs\\\\words-app\\\\client\\\\src\\\\routes\\\\Room.js\";\nimport React from \"react\";\nimport io from \"socket.io-client\";\n\nconst Room = props => {\n  const userVideo = React.useRef();\n  const partnerVideo = React.useRef();\n  const peerRef = React.useRef();\n  const socketRef = React.useRef();\n  const otherUser = React.useRef();\n  const userStream = React.useRef();\n  React.useEffect(() => {\n    function callUser(userID) {\n      peerRef.current = createPeer(userID);\n      userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n    }\n\n    function createPeer(userID) {\n      const peer = new RTCPeerConnection({\n        iceServers: [{\n          urls: \"stun:stun.stunprotocol.org\"\n        }, {\n          urls: 'turn:numb.viagenie.ca',\n          credential: 'muazkh',\n          username: 'webrtc@live.com'\n        }]\n      });\n      peer.onicecandidate = handleICECandidateEvent;\n      peer.ontrack = handleTrackEvent;\n\n      peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\n\n      return peer;\n    }\n\n    function handleRecieveCall(incoming) {\n      peerRef.current = createPeer();\n      const desc = new RTCSessionDescription(incoming.sdp);\n      peerRef.current.setRemoteDescription(desc).then(() => {\n        userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n      }).then(() => {\n        return peerRef.current.createAnswer();\n      }).then(answer => {\n        return peerRef.current.setLocalDescription(answer);\n      }).then(() => {\n        const payload = {\n          target: incoming.caller,\n          caller: socketRef.current.id,\n          sdp: peerRef.current.localDescription\n        };\n        socketRef.current.emit(\"answer\", payload);\n      });\n    }\n\n    function handleNegotiationNeededEvent(userID) {\n      peerRef.current.createOffer().then(offer => {\n        return peerRef.current.setLocalDescription(offer);\n      }).then(() => {\n        const payload = {\n          target: userID,\n          caller: socketRef.current.id,\n          sdp: peerRef.current.localDescription\n        };\n        socketRef.current.emit(\"offer\", payload);\n      }).catch(e => console.log(e));\n    }\n\n    function handleAnswer(message) {\n      const desc = new RTCSessionDescription(message.sdp);\n      peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\n    }\n\n    function handleICECandidateEvent(e) {\n      if (e.candidate) {\n        const payload = {\n          target: otherUser.current,\n          candidate: e.candidate\n        };\n        socketRef.current.emit(\"ice-candidate\", payload);\n      }\n    }\n\n    function handleNewICECandidateMsg(incoming) {\n      const candidate = new RTCIceCandidate(incoming);\n      peerRef.current.addIceCandidate(candidate).catch(e => console.log(e));\n    }\n\n    function handleTrackEvent(e) {\n      partnerVideo.current.srcObject = e.streams[0];\n    }\n\n    ;\n\n    function socketConfiguration() {\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      }).then(stream => {\n        userVideo.current.srcObject = stream;\n        userStream.current = stream;\n        socketRef.current = io.connect(\"/\");\n        socketRef.current.emit(\"join room\", props.match.params.roomID);\n        socketRef.current.on('other user', userID => {\n          callUser(userID);\n          otherUser.current = userID;\n        });\n        socketRef.current.on(\"user joined\", userID => {\n          otherUser.current = userID;\n        });\n        socketRef.current.on(\"offer\", handleRecieveCall);\n        socketRef.current.on(\"answer\", handleAnswer);\n        socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n      });\n    }\n\n    socketConfiguration();\n  }, [props]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: partnerVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Room;","map":{"version":3,"sources":["D:/Projects/reactjs/words-app/client/src/routes/Room.js"],"names":["React","io","Room","props","userVideo","useRef","partnerVideo","peerRef","socketRef","otherUser","userStream","useEffect","callUser","userID","current","createPeer","getTracks","forEach","track","addTrack","peer","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","handleTrackEvent","onnegotiationneeded","handleNegotiationNeededEvent","handleRecieveCall","incoming","desc","RTCSessionDescription","sdp","setRemoteDescription","then","createAnswer","answer","setLocalDescription","payload","target","caller","id","localDescription","emit","createOffer","offer","catch","e","console","log","handleAnswer","message","candidate","handleNewICECandidateMsg","RTCIceCandidate","addIceCandidate","srcObject","streams","socketConfiguration","navigator","mediaDevices","getUserMedia","audio","video","stream","connect","match","params","roomID","on"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst Room = (props) => {\r\n    \r\n    const userVideo = React.useRef();\r\n    const partnerVideo = React.useRef();\r\n    const peerRef = React.useRef();\r\n    const socketRef = React.useRef();\r\n    const otherUser = React.useRef();\r\n    const userStream = React.useRef();\r\n\r\n    React.useEffect(() => {\r\n\r\n        function callUser(userID) {\r\n            peerRef.current = createPeer(userID);\r\n            userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\r\n        }\r\n\r\n        function createPeer(userID) {\r\n            const peer = new RTCPeerConnection({\r\n                iceServers: [\r\n                    {\r\n                        urls: \"stun:stun.stunprotocol.org\"\r\n                    },\r\n                    {\r\n                        urls: 'turn:numb.viagenie.ca',\r\n                        credential: 'muazkh',\r\n                        username: 'webrtc@live.com'\r\n                    },\r\n                ]\r\n            });\r\n            peer.onicecandidate = handleICECandidateEvent;\r\n            peer.ontrack = handleTrackEvent;\r\n            peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\r\n            return peer;\r\n        }\r\n\r\n        function handleRecieveCall(incoming) {\r\n            peerRef.current = createPeer();\r\n            const desc = new RTCSessionDescription(incoming.sdp);\r\n            peerRef.current.setRemoteDescription(desc).then(() => {\r\n                userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\r\n            }).then(() => {\r\n                return peerRef.current.createAnswer();\r\n            }).then(answer => {\r\n                return peerRef.current.setLocalDescription(answer);\r\n            }).then(() => {\r\n                const payload = {\r\n                    target: incoming.caller,\r\n                    caller: socketRef.current.id,\r\n                    sdp: peerRef.current.localDescription\r\n                }\r\n                socketRef.current.emit(\"answer\", payload);\r\n            })\r\n        }\r\n\r\n        function handleNegotiationNeededEvent(userID) {\r\n            peerRef.current.createOffer().then(offer => {\r\n                return peerRef.current.setLocalDescription(offer);\r\n            }).then(() => {\r\n                const payload = {\r\n                    target: userID,\r\n                    caller: socketRef.current.id,\r\n                    sdp: peerRef.current.localDescription\r\n                };\r\n                socketRef.current.emit(\"offer\", payload);\r\n            }).catch(e => console.log(e));\r\n        }\r\n    \r\n        function handleAnswer(message) {\r\n            const desc = new RTCSessionDescription(message.sdp);\r\n            peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\r\n        }\r\n    \r\n        function handleICECandidateEvent(e) {\r\n            if (e.candidate) {\r\n                const payload = {\r\n                    target: otherUser.current,\r\n                    candidate: e.candidate,\r\n                }\r\n                socketRef.current.emit(\"ice-candidate\", payload);\r\n            }\r\n        }\r\n    \r\n        function handleNewICECandidateMsg(incoming) {\r\n            const candidate = new RTCIceCandidate(incoming);\r\n    \r\n            peerRef.current.addIceCandidate(candidate)\r\n                .catch(e => console.log(e));\r\n        }\r\n    \r\n        function handleTrackEvent(e) {\r\n            partnerVideo.current.srcObject = e.streams[0];\r\n        };\r\n\r\n        function socketConfiguration(){\r\n            navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(stream => {\r\n                userVideo.current.srcObject = stream;\r\n                userStream.current = stream;\r\n    \r\n                socketRef.current = io.connect(\"/\");\r\n                socketRef.current.emit(\"join room\", props.match.params.roomID);\r\n    \r\n                socketRef.current.on('other user', userID => {\r\n                    callUser(userID);\r\n                    otherUser.current = userID;\r\n                });\r\n    \r\n                socketRef.current.on(\"user joined\", userID => {\r\n                    otherUser.current = userID;\r\n                });\r\n    \r\n                socketRef.current.on(\"offer\", handleRecieveCall);\r\n                socketRef.current.on(\"answer\", handleAnswer);\r\n                socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\r\n            });\r\n        }\r\n        socketConfiguration();\r\n    }, [props]);\r\n\r\n    return (\r\n        <div>\r\n            <video autoPlay ref={userVideo} />\r\n            <video autoPlay ref={partnerVideo} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Room;"]},"metadata":{},"sourceType":"module"}