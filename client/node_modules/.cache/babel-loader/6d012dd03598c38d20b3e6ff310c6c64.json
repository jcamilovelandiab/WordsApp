{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\reactjs\\\\words-app\\\\client\\\\src\\\\routes\\\\Room.js\";\nimport React from \"react\";\nimport io from \"socket.io-client\";\n\nconst Room = props => {\n  const userVideo = React.useRef();\n  const partnerVideo = React.useRef();\n  const peerRef = React.useRef();\n  const socketRef = React.useRef();\n  const otherUser = React.useRef();\n  const userStream = React.useRef();\n  React.useEffect(() => {\n    function socketConfiguration() {\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      }).then(stream => {\n        userVideo.current.srcObject = stream;\n        userStream.current = stream;\n        socketRef.current = io.connect(\"/\");\n        socketRef.current.emit(\"join room\", props.match.params.roomID);\n        socketRef.current.on('other user', userID => {\n          callUser(userID);\n          otherUser.current = userID;\n        });\n        socketRef.current.on(\"user joined\", userID => {\n          otherUser.current = userID;\n        });\n        socketRef.current.on(\"offer\", handleRecieveCall);\n        socketRef.current.on(\"answer\", handleAnswer);\n        socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n      });\n    }\n\n    socketConfiguration();\n  }, [props]);\n\n  function callUser(userID) {\n    peerRef.current = createPeer(userID);\n    userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n  }\n\n  function createPeer(userID) {\n    const peer = new RTCPeerConnection({\n      iceServers: [{\n        urls: \"stun:stun.stunprotocol.org\"\n      }, {\n        urls: 'turn:numb.viagenie.ca',\n        credential: 'muazkh',\n        username: 'webrtc@live.com'\n      }]\n    });\n    peer.onicecandidate = handleICECandidateEvent;\n    peer.ontrack = handleTrackEvent;\n\n    peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\n\n    return peer;\n  }\n\n  function handleNegotiationNeededEvent(userID) {\n    peerRef.current.createOffer().then(offer => {\n      return peerRef.current.setLocalDescription(offer);\n    }).then(() => {\n      const payload = {\n        target: userID,\n        caller: socketRef.current.id,\n        sdp: peerRef.current.localDescription\n      };\n      socketRef.current.emit(\"offer\", payload);\n    }).catch(e => console.log(e));\n  }\n\n  function handleRecieveCall(incoming) {\n    peerRef.current = createPeer();\n    const desc = new RTCSessionDescription(incoming.sdp);\n    peerRef.current.setRemoteDescription(desc).then(() => {\n      userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n    }).then(() => {\n      return peerRef.current.createAnswer();\n    }).then(answer => {\n      return peerRef.current.setLocalDescription(answer);\n    }).then(() => {\n      const payload = {\n        target: incoming.caller,\n        caller: socketRef.current.id,\n        sdp: peerRef.current.localDescription\n      };\n      socketRef.current.emit(\"answer\", payload);\n    });\n  }\n\n  function handleAnswer(message) {\n    const desc = new RTCSessionDescription(message.sdp);\n    peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\n  }\n\n  function handleICECandidateEvent(e) {\n    if (e.candidate) {\n      const payload = {\n        target: otherUser.current,\n        candidate: e.candidate\n      };\n      socketRef.current.emit(\"ice-candidate\", payload);\n    }\n  }\n\n  function handleNewICECandidateMsg(incoming) {\n    const candidate = new RTCIceCandidate(incoming);\n    peerRef.current.addIceCandidate(candidate).catch(e => console.log(e));\n  }\n\n  function handleTrackEvent(e) {\n    partnerVideo.current.srcObject = e.streams[0];\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: partnerVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Room;","map":{"version":3,"sources":["D:/Projects/reactjs/words-app/client/src/routes/Room.js"],"names":["React","io","Room","props","userVideo","useRef","partnerVideo","peerRef","socketRef","otherUser","userStream","useEffect","socketConfiguration","navigator","mediaDevices","getUserMedia","audio","video","then","stream","current","srcObject","connect","emit","match","params","roomID","on","userID","callUser","handleRecieveCall","handleAnswer","handleNewICECandidateMsg","createPeer","getTracks","forEach","track","addTrack","peer","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","handleTrackEvent","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","offer","setLocalDescription","payload","target","caller","id","sdp","localDescription","catch","e","console","log","incoming","desc","RTCSessionDescription","setRemoteDescription","createAnswer","answer","message","candidate","RTCIceCandidate","addIceCandidate","streams"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst Room = (props) => {\r\n    \r\n    const userVideo = React.useRef();\r\n    const partnerVideo = React.useRef();\r\n    const peerRef = React.useRef();\r\n    const socketRef = React.useRef();\r\n    const otherUser = React.useRef();\r\n    const userStream = React.useRef();\r\n\r\n    React.useEffect(() => {\r\n        function socketConfiguration(){\r\n            navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(stream => {\r\n                userVideo.current.srcObject = stream;\r\n                userStream.current = stream;\r\n    \r\n                socketRef.current = io.connect(\"/\");\r\n                socketRef.current.emit(\"join room\", props.match.params.roomID);\r\n    \r\n                socketRef.current.on('other user', userID => {\r\n                    callUser(userID);\r\n                    otherUser.current = userID;\r\n                });\r\n    \r\n                socketRef.current.on(\"user joined\", userID => {\r\n                    otherUser.current = userID;\r\n                });\r\n    \r\n                socketRef.current.on(\"offer\", handleRecieveCall);\r\n                socketRef.current.on(\"answer\", handleAnswer);\r\n                socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\r\n            });\r\n        }\r\n        socketConfiguration();\r\n    }, [props]);\r\n\r\n    function callUser(userID) {\r\n        peerRef.current = createPeer(userID);\r\n        userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\r\n    }\r\n\r\n    function createPeer(userID) {\r\n        const peer = new RTCPeerConnection({\r\n            iceServers: [\r\n                {\r\n                    urls: \"stun:stun.stunprotocol.org\"\r\n                },\r\n                {\r\n                    urls: 'turn:numb.viagenie.ca',\r\n                    credential: 'muazkh',\r\n                    username: 'webrtc@live.com'\r\n                },\r\n            ]\r\n        });\r\n\r\n        peer.onicecandidate = handleICECandidateEvent;\r\n        peer.ontrack = handleTrackEvent;\r\n        peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\r\n\r\n        return peer;\r\n    }\r\n\r\n    function handleNegotiationNeededEvent(userID) {\r\n        peerRef.current.createOffer().then(offer => {\r\n            return peerRef.current.setLocalDescription(offer);\r\n        }).then(() => {\r\n            const payload = {\r\n                target: userID,\r\n                caller: socketRef.current.id,\r\n                sdp: peerRef.current.localDescription\r\n            };\r\n            socketRef.current.emit(\"offer\", payload);\r\n        }).catch(e => console.log(e));\r\n    }\r\n\r\n    function handleRecieveCall(incoming) {\r\n        peerRef.current = createPeer();\r\n        const desc = new RTCSessionDescription(incoming.sdp);\r\n        peerRef.current.setRemoteDescription(desc).then(() => {\r\n            userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\r\n        }).then(() => {\r\n            return peerRef.current.createAnswer();\r\n        }).then(answer => {\r\n            return peerRef.current.setLocalDescription(answer);\r\n        }).then(() => {\r\n            const payload = {\r\n                target: incoming.caller,\r\n                caller: socketRef.current.id,\r\n                sdp: peerRef.current.localDescription\r\n            }\r\n            socketRef.current.emit(\"answer\", payload);\r\n        })\r\n    }\r\n\r\n    function handleAnswer(message) {\r\n        const desc = new RTCSessionDescription(message.sdp);\r\n        peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\r\n    }\r\n\r\n    function handleICECandidateEvent(e) {\r\n        if (e.candidate) {\r\n            const payload = {\r\n                target: otherUser.current,\r\n                candidate: e.candidate,\r\n            }\r\n            socketRef.current.emit(\"ice-candidate\", payload);\r\n        }\r\n    }\r\n\r\n    function handleNewICECandidateMsg(incoming) {\r\n        const candidate = new RTCIceCandidate(incoming);\r\n\r\n        peerRef.current.addIceCandidate(candidate)\r\n            .catch(e => console.log(e));\r\n    }\r\n\r\n    function handleTrackEvent(e) {\r\n        partnerVideo.current.srcObject = e.streams[0];\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <video autoPlay ref={userVideo} />\r\n            <video autoPlay ref={partnerVideo} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Room;"]},"metadata":{},"sourceType":"module"}